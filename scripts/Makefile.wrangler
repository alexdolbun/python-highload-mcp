# Makefile for Python HighLoad MCP - Wrangler Integration
# Optimized CI/CD automation with Cloudflare Workers deployment
# Include this in your main Makefile or use directly

.PHONY: help wrangler-setup wrangler-dev wrangler-staging wrangler-prod wrangler-local
.PHONY: wrangler-test wrangler-clean wrangler-logs wrangler-status wrangler-secrets
.PHONY: performance-test load-test health-check deploy-all

# Configuration
ENVIRONMENT ?= dev
PROJECT_NAME = python-highload-mcp
SCRIPT_DIR = scripts
WRANGLER = wrangler
NODE_ENV ?= production

# Colors
GREEN = \033[0;32m
YELLOW = \033[1;33m
RED = \033[0;31m
NC = \033[0m # No Color

help: ## Show this help message
	@echo "Python HighLoad MCP - Wrangler Integration"
	@echo "==========================================="
	@echo ""
	@echo "Available targets:"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-20s\033[0m %s\n", $$1, $$2}'
	@echo ""
	@echo "Examples:"
	@echo "  make wrangler-dev          # Deploy to development"
	@echo "  make wrangler-prod         # Deploy to production"
	@echo "  make wrangler-local        # Start local development"
	@echo "  make deploy-all            # Deploy to all environments"

# Setup and Installation
wrangler-setup: ## Install Wrangler CLI and setup project
	@echo -e "$(GREEN)[SETUP]$(NC) Installing Wrangler CLI and dependencies..."
	@npm install -g wrangler@latest
	@npm install --save-dev @cloudflare/workers-types
	@echo -e "$(GREEN)[SETUP]$(NC) Wrangler setup complete"

wrangler-auth: ## Authenticate with Cloudflare
	@echo -e "$(YELLOW)[AUTH]$(NC) Authenticating with Cloudflare..."
	@$(WRANGLER) login
	@echo -e "$(GREEN)[AUTH]$(NC) Authentication complete"

# Development Commands
wrangler-local: ## Start local development server
	@echo -e "$(GREEN)[LOCAL]$(NC) Starting local development server..."
	@$(SCRIPT_DIR)/deploy-wrangler.sh local

wrangler-dev: ## Deploy to development environment
	@echo -e "$(GREEN)[DEV]$(NC) Deploying to development environment..."
	@$(SCRIPT_DIR)/deploy-wrangler.sh dev --build --test --check

wrangler-dev-quick: ## Quick deploy to development (skip tests)
	@echo -e "$(YELLOW)[DEV-QUICK]$(NC) Quick deployment to development..."
	@$(SCRIPT_DIR)/deploy-wrangler.sh dev --skip-tests

# Staging Commands  
wrangler-staging: ## Deploy to staging environment
	@echo -e "$(GREEN)[STAGING]$(NC) Deploying to staging environment..."
	@$(SCRIPT_DIR)/deploy-wrangler.sh staging --build --test --check --performance-test

wrangler-staging-test: ## Deploy to staging with full testing
	@echo -e "$(GREEN)[STAGING-TEST]$(NC) Deploying to staging with comprehensive testing..."
	@$(SCRIPT_DIR)/deploy-wrangler.sh staging --build --test --check --performance-test --secrets

# Production Commands
wrangler-prod: ## Deploy to production environment
	@echo -e "$(RED)[PRODUCTION]$(NC) Deploying to production environment..."
	@echo -e "$(YELLOW)⚠️  This will deploy to PRODUCTION. Continue? [y/N]$(NC)" && read ans && [ $${ans:-N} = y ]
	@$(SCRIPT_DIR)/deploy-wrangler.sh prod --build --test --check --performance-test --secrets

wrangler-prod-dry: ## Dry run production deployment
	@echo -e "$(YELLOW)[PROD-DRY]$(NC) Dry run production deployment..."
	@$(SCRIPT_DIR)/deploy-wrangler.sh prod --dry-run --build --test

# Testing Commands
wrangler-test: ## Run tests before deployment
	@echo -e "$(GREEN)[TEST]$(NC) Running Python tests..."
	@python3 -m pytest tests/ -v --cov=src --cov-report=term-missing --cov-fail-under=85 -n auto

performance-test: ## Run performance tests against deployed environment
	@echo -e "$(GREEN)[PERF-TEST]$(NC) Running performance tests against $(ENVIRONMENT) environment..."
	@$(SCRIPT_DIR)/deploy-wrangler.sh $(ENVIRONMENT) --performance-test

load-test: ## Run load tests (requires k6 or similar tool)
	@echo -e "$(GREEN)[LOAD-TEST]$(NC) Running load tests..."
	@if command -v k6 >/dev/null 2>&1; then \
		k6 run scripts/load-test.js; \
	else \
		echo -e "$(YELLOW)[WARNING]$(NC) k6 not installed. Running simple curl-based test..."; \
		for i in $$(seq 1 50); do \
			curl -s "https://$(PROJECT_NAME)-$(ENVIRONMENT).YOUR_SUBDOMAIN.workers.dev/health" > /dev/null & \
		done; \
		wait; \
		echo "Simple load test completed"; \
	fi

health-check: ## Check health of deployed services
	@echo -e "$(GREEN)[HEALTH]$(NC) Checking health of all environments..."
	@echo "Development:"
	@curl -f -s "https://$(PROJECT_NAME)-dev.YOUR_SUBDOMAIN.workers.dev/health" | jq '.' || echo "❌ Dev environment unreachable"
	@echo "Staging:"
	@curl -f -s "https://$(PROJECT_NAME)-staging.YOUR_SUBDOMAIN.workers.dev/health" | jq '.' || echo "❌ Staging environment unreachable"
	@echo "Production:"
	@curl -f -s "https://$(PROJECT_NAME)-prod.YOUR_SUBDOMAIN.workers.dev/health" | jq '.' || echo "❌ Production environment unreachable"

# Deployment Management
deploy-all: ## Deploy to all environments in sequence
	@echo -e "$(GREEN)[DEPLOY-ALL]$(NC) Deploying to all environments..."
	@make wrangler-dev
	@sleep 30
	@make wrangler-staging  
	@sleep 60
	@echo -e "$(YELLOW)Ready to deploy to production? [y/N]$(NC)" && read ans && [ $${ans:-N} = y ]
	@make wrangler-prod

rollback: ## Rollback to previous version (requires manual intervention)
	@echo -e "$(RED)[ROLLBACK]$(NC) Rollback functionality requires manual intervention"
	@echo "Please use Cloudflare Dashboard to rollback or use 'wrangler rollback' command"
	@$(WRANGLER) deployments list --env $(ENVIRONMENT)

# Secrets Management
wrangler-secrets: ## Manage Wrangler secrets
	@echo -e "$(GREEN)[SECRETS]$(NC) Managing Wrangler secrets..."
	@echo "Available secret commands:"
	@echo "  wrangler secret list               # List secrets"
	@echo "  wrangler secret put SECRET_NAME    # Set secret"
	@echo "  wrangler secret delete SECRET_NAME # Delete secret"

wrangler-secrets-list: ## List all secrets
	@$(WRANGLER) secret list --env $(ENVIRONMENT)

# Monitoring and Logs
wrangler-logs: ## View real-time logs
	@echo -e "$(GREEN)[LOGS]$(NC) Viewing real-time logs for $(ENVIRONMENT) environment..."
	@$(WRANGLER) tail --env $(ENVIRONMENT)

wrangler-logs-search: ## Search logs (requires log term as TERM variable)
	@echo -e "$(GREEN)[LOGS-SEARCH]$(NC) Searching logs for: $(TERM)"
	@$(WRANGLER) tail --env $(ENVIRONMENT) --search "$(TERM)"

wrangler-status: ## Show deployment status
	@echo -e "$(GREEN)[STATUS]$(NC) Deployment status for all environments:"
	@echo ""
	@echo "=== Development ==="
	@$(WRANGLER) deployments list --env development | head -5
	@echo ""
	@echo "=== Staging ==="
	@$(WRANGLER) deployments list --env staging | head -5
	@echo ""
	@echo "=== Production ==="
	@$(WRANGLER) deployments list --env production | head -5

# Analytics and Metrics
wrangler-analytics: ## View analytics for deployed workers
	@echo -e "$(GREEN)[ANALYTICS]$(NC) Viewing analytics for $(ENVIRONMENT) environment..."
	@$(WRANGLER) metrics --env $(ENVIRONMENT)

# Maintenance Commands
wrangler-clean: ## Clean up deployment artifacts and logs
	@echo -e "$(YELLOW)[CLEAN]$(NC) Cleaning up deployment artifacts..."
	@rm -rf logs/deploy_*.log
	@rm -rf logs/last_deployment_*.json
	@rm -rf dist/
	@rm -rf node_modules/.cache/
	@echo -e "$(GREEN)[CLEAN]$(NC) Cleanup complete"

wrangler-update: ## Update Wrangler CLI and dependencies
	@echo -e "$(GREEN)[UPDATE]$(NC) Updating Wrangler CLI and dependencies..."
	@npm update -g wrangler
	@npm update @cloudflare/workers-types
	@echo -e "$(GREEN)[UPDATE]$(NC) Update complete"

# Configuration Management
wrangler-validate: ## Validate wrangler.toml configuration
	@echo -e "$(GREEN)[VALIDATE]$(NC) Validating wrangler.toml configuration..."
	@$(WRANGLER) deploy --dry-run --env development
	@$(WRANGLER) deploy --dry-run --env staging  
	@$(WRANGLER) deploy --dry-run --env production
	@echo -e "$(GREEN)[VALIDATE]$(NC) Configuration validation complete"

wrangler-whoami: ## Show current Cloudflare account info
	@echo -e "$(GREEN)[WHOAMI]$(NC) Current Cloudflare account information:"
	@$(WRANGLER) whoami

# CI/CD Integration
ci-deploy: ## Deploy using CI/CD optimized settings
	@echo -e "$(GREEN)[CI-DEPLOY]$(NC) Running CI/CD optimized deployment..."
	@ENVIRONMENT=$(ENVIRONMENT) $(SCRIPT_DIR)/deploy-wrangler.sh $(ENVIRONMENT) --build --test --check --skip-interactive

ci-test: ## Run CI/CD optimized tests
	@echo -e "$(GREEN)[CI-TEST]$(NC) Running CI/CD optimized tests..."
	@python3 -m pytest tests/ -v --tb=short --cov=src --cov-report=xml --cov-fail-under=80 -n auto --dist worksteal

# Development Utilities
dev-setup: ## Setup complete development environment
	@echo -e "$(GREEN)[DEV-SETUP]$(NC) Setting up development environment..."
	@make wrangler-setup
	@python3 -m pip install -r requirements.txt
	@python3 -m pip install pytest pytest-cov pytest-xdist pytest-benchmark
	@echo -e "$(GREEN)[DEV-SETUP]$(NC) Development environment ready"

# Documentation
docs-deploy: ## Generate and deploy documentation
	@echo -e "$(GREEN)[DOCS]$(NC) Generating deployment documentation..."
	@mkdir -p docs/deployment
	@cat > docs/deployment/wrangler-integration.md << 'EOF'
# Wrangler Integration Documentation

## Quick Start
- `make wrangler-setup` - Initial setup
- `make wrangler-local` - Local development
- `make wrangler-dev` - Deploy to development  
- `make wrangler-prod` - Deploy to production

## Environments
- **Development**: python-highload-mcp-dev.YOUR_SUBDOMAIN.workers.dev
- **Staging**: python-highload-mcp-staging.YOUR_SUBDOMAIN.workers.dev  
- **Production**: python-highload-mcp-prod.YOUR_SUBDOMAIN.workers.dev

## Configuration
Edit `wrangler.toml` for environment-specific settings.
EOF
	@echo -e "$(GREEN)[DOCS]$(NC) Documentation generated at docs/deployment/"

# Default target
.DEFAULT_GOAL := help
